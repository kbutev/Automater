/*
 * Created by Kristiyan Butev.
 * Copyright Â© 2019 Kristiyan Butev. All rights reserved.
 */
package automater.ui.view;

import automater.utilities.Callback;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Byti
 */
public class EditMacroActionCommandPanel extends javax.swing.JPanel {
    // UI callbacks
    public Callback.WithParameter<String> onCommandValueChanged = Callback.buildBlankWithParameter();
    public Callback.WithParameter<Boolean> onReportErrorChanged = Callback.buildBlankWithParameter();

    /**
     * Creates new form EditMacroActionCommandPanel
     */
    public EditMacroActionCommandPanel() {
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        commandArea = new javax.swing.JTextArea();
        commandLabel = new javax.swing.JLabel();
        reportErrorCheck = new javax.swing.JCheckBox();

        commandArea.setColumns(20);
        commandArea.setLineWrap(true);
        commandArea.setRows(5);
        jScrollPane1.setViewportView(commandArea);

        commandLabel.setText("Command");

        reportErrorCheck.setText("Report Errors");
        reportErrorCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportErrorCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(commandLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reportErrorCheck)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandLabel)
                    .addComponent(reportErrorCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reportErrorCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportErrorCheckActionPerformed
        onReportErrorChanged.perform(reportErrorCheck.isSelected());
    }//GEN-LAST:event_reportErrorCheckActionPerformed

    private void setup() {
        DocumentListener listener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String result = commandArea.getText();
                onCommandValueChanged.perform(result);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String result = commandArea.getText();
                onCommandValueChanged.perform(result);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                String result = commandArea.getText();
                onCommandValueChanged.perform(result);
            }
        };
        
        commandArea.getDocument().addDocumentListener(listener);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea commandArea;
    public javax.swing.JLabel commandLabel;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JCheckBox reportErrorCheck;
    // End of variables declaration//GEN-END:variables
}
