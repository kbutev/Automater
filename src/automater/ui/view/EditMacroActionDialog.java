/*
 * Created by Kristiyan Butev.
 * Copyright Â© 2019 Kristiyan Butev. All rights reserved.
 */
package automater.ui.view;

import automater.TextValue;
import automater.utilities.Callback;
import automater.utilities.SimpleCallback;
import automater.utilities.StringFormatting;
import automater.mutableaction.MutableActionType;
import java.awt.BorderLayout;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataListener;
import automater.mutableaction.BaseMutableAction;
import automater.mutableaction.BaseMutableActionProperty;
import automater.mutableaction.MutableActionPropertyList;
import automater.utilities.TimeType;
import automater.utilities.TimeValue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.jetbrains.annotations.NotNull;

/**
 *
 * @author Bytevi
 */
public class EditMacroActionDialog extends javax.swing.JDialog {

    public static final int MAX_TIMESTAMP_VALUE_LENGTH = 7;

    // UI callbacks
    public SimpleCallback onCancelButtonCallback = SimpleCallback.createDoNothing();
    public SimpleCallback onSaveButtonCallback = SimpleCallback.createDoNothing();

    public Callback<Integer> onTypeChangedCallback = Callback.createDoNothing();

    public SimpleCallback onHotkeyButtonCallback = SimpleCallback.createDoNothing();
    public SimpleCallback onPressCheckCallback = SimpleCallback.createDoNothing();

    public TimeType defaultSelectedTimeType = TimeType.seconds;

    /**
     * Creates new form EditMacroActionDialog
     */
    public EditMacroActionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typesDropdown = new javax.swing.JComboBox<>();
        panel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        timeField = new javax.swing.JTextField();
        timeLabel = new javax.swing.JLabel();
        timeTypeCombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        typesDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        typesDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typesDropdownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 158, Short.MAX_VALUE)
        );

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("Status");

        timeField.setText("0");

        timeLabel.setText("Time position");
        timeLabel.setToolTipText("Time at which this action is performed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cancelButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(typesDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 133, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typesDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        onSaveButtonCallback.perform();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        onCancelButtonCallback.perform();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        onCancelButtonCallback.perform();
    }//GEN-LAST:event_formWindowDeactivated

    private void typesDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typesDropdownActionPerformed
        int index = typesDropdown.getSelectedIndex();

        if (_selectedTypeIndex != index) {
            onTypeChangedCallback.perform(index);
        }
    }//GEN-LAST:event_typesDropdownActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditMacroActionDialog dialog = new EditMacroActionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void setup() {
        this.setTitle(TextValue.getText(TextValue.EditAction_DialogTitle));

        cancelButton.setText(TextValue.getText(TextValue.EditAction_CancelButtonTitle));
        saveButton.setText(TextValue.getText(TextValue.EditAction_SaveButtonTitle));

        statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusDefault));

        timeLabel.setText(TextValue.getText(TextValue.EditAction_Time));

        for (TimeType t : TimeType.listOfSimpleTypes()) {
            timeTypeCombo.addItem(t.stringValue());
        }

        timeTypeCombo.setSelectedItem(defaultSelectedTimeType.stringValue());
    }

    // # Public
    public void setTypesDropdownModel(@NotNull StandardDescriptionsDataSource dataSource) {
        _actionTypesModel = new EditMacroActionTypesModel(dataSource);
        typesDropdown.setModel(_actionTypesModel);
    }

    public void selectDropdownType(int index) {
        if (index < 0 || index >= _actionTypesModel.getSize()) {
            return;
        }

        _selectedTypeIndex = index;

        typesDropdown.setSelectedIndex(index);
    }

    public void setMutableAction(@NotNull BaseMutableAction mutableAction) {
        _mutableAction = mutableAction;

        setupMutableAction();
    }

    public void startHotkeyListening() {
        typesDropdown.setEnabled(false);
        timeField.setEnabled(false);

        statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusListeningToHotkey));
    }

    public void endHotkeyListeningWithoutAnyKeyEntered() {
        typesDropdown.setEnabled(true);
        timeField.setEnabled(true);
    }

    public void endHotkeyListening(@NotNull String hotkey) {
        endHotkeyListeningWithoutAnyKeyEntered();

        if (_hotkeyButton != null) {
            _hotkeyButton.setText(hotkey);
        }

        setActionFirstValue(hotkey);
    }

    public void displayError(@NotNull String error) {
        statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusError, error));
    }

    // # Private - properties
    private void setActionFirstValue(@NotNull String value) {
        if (_mutableAction == null) {
            return;
        }

        _mutableAction.getFirstProperty().setValue(value);

        onAnyValueChanged();
    }

    private void setActionSecondValue(@NotNull String value) {
        if (_mutableAction == null) {
            return;
        }

        _mutableAction.getSecondProperty().setValue(value);

        onAnyValueChanged();
    }

    // # Private - setup view
    private void clearCurrentPanel() {
        panel.removeAll();
    }

    private void setupMutableAction() {
        if (_mutableAction == null) {
            return;
        }

        timeField.setText(originalTimestampAsString());
        timeField.setEditable(true);

        DocumentListener listener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateActionWithNewestTimestamp();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateActionWithNewestTimestamp();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateActionWithNewestTimestamp();
            }
        };

        timeField.getDocument().addDocumentListener(listener);

        timeTypeCombo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // When we change the type we convert the time typed in the box.
                // We will use the original timestamp, as opposed to the one currently typed.
                timeField.setText(originalTimestampAsString());
                onAnyValueChanged();
            }
        });

        // Setup state
        updateState();

        // Setup current panel
        clearCurrentPanel();

        if (_mutableAction.getType() == MutableActionType.DoNothing) {
            setupDoNothingPanel();
        }

        if (_mutableAction.getType() == MutableActionType.Wait) {
            setupWaitPanel();
        }

        if (_mutableAction.getType() == MutableActionType.KeyboardKey) {
            setupHotkeyPanel();
        }

        if (_mutableAction.getType() == MutableActionType.MouseKey) {
            setupMouseKeyPanel();
        }

        if (_mutableAction.getType() == MutableActionType.MouseMove) {
            setupMouseMovePanel();
        }

        if (_mutableAction.getType() == MutableActionType.MouseMotion) {
            setupMouseMovePanel();
        }

        if (_mutableAction.getType() == MutableActionType.SystemCommand) {
            setupSystemCommandPanel();
        }

        if (_mutableAction.getType() == MutableActionType.Screenshot) {
            setupScreenshot();
        }
    }

    private void setupDoNothingPanel() {
        if (_mutableAction == null) {
            return;
        }

        // Setup view
        EditMacroActionDoNothingPanel view = new EditMacroActionDoNothingPanel();

        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);
    }

    private void setupWaitPanel() {
        if (_mutableAction == null) {
            return;
        }

        // Properties
        BaseMutableActionProperty first = _mutableAction.getFirstProperty();
        BaseMutableActionProperty second = _mutableAction.getSecondProperty();

        // Setup view
        EditMacroActionWaitPanel view = new EditMacroActionWaitPanel();

        view.onWaitTimeCallback = new Callback<String>() {
            @Override
            public void perform(String argument) {
                if (argument.isEmpty()) {
                    return;
                }

                TimeType timeType = view.currentSelectedTimeType();
                setActionFirstValue(timeType.asTimeFromString(argument).inMillisecondsAsString());
                onPressCheckCallback.perform();
            }
        };

        view.onTimeTypeCallback = new Callback<TimeType>() {
            @Override
            public void perform(TimeType argument) {
                setActionSecondValue(argument.name());
                onPressCheckCallback.perform();
            }
        };

        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);

        // Setup values and their labels
        String firstValue = first.getValue();
        long timeValueMS = Long.parseLong(firstValue);
        view.setTime(TimeValue.fromMilliseconds(timeValueMS), second.getValue());
    }

    private void setupHotkeyPanel() {
        if (_mutableAction == null) {
            return;
        }

        // Properties
        BaseMutableActionProperty first = _mutableAction.getFirstProperty();
        BaseMutableActionProperty second = _mutableAction.getSecondProperty();

        // Setup view
        EditMacroActionHotkeyPanel view = new EditMacroActionHotkeyPanel();
        _hotkeyButton = view.hotkeyButton;

        view.onHotkeyButtonCallback = onHotkeyButtonCallback;

        view.onPressCheckCallback = new Callback<Boolean>() {
            @Override
            public void perform(Boolean argument) {
                String newValue = String.valueOf(view.pressCheck.isSelected());
                setActionSecondValue(newValue);
                onPressCheckCallback.perform();
            }
        };

        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);

        // Setup values and their labels
        view.keyLabel.setText(first.getName());
        _hotkeyButton.setText(first.getValue());

        view.pressCheck.setText(second.getName());
        view.pressCheck.setSelected(Boolean.valueOf(second.getValue()));
    }

    private void setupMouseKeyPanel() {
        if (_mutableAction == null) {
            return;
        }

        // Properties
        BaseMutableActionProperty first = _mutableAction.getFirstProperty();
        BaseMutableActionProperty second = _mutableAction.getSecondProperty();

        List<String> values;

        if (first instanceof MutableActionPropertyList) {
            values = ((MutableActionPropertyList) first).getValues();
        } else {
            return;
        }

        // Setup view
        EditMacroActionMouseKeyPanel view = new EditMacroActionMouseKeyPanel();

        view.onSelectedValueCallback = new Callback<String>() {
            @Override
            public void perform(String argument) {
                String newValue = argument;
                setActionFirstValue(newValue);
            }
        };

        view.onPressCheckCallback = new Callback<Boolean>() {
            @Override
            public void perform(Boolean argument) {
                String newValue = String.valueOf(view.pressCheck.isSelected());
                setActionSecondValue(newValue);
                onPressCheckCallback.perform();
            }
        };

        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);

        // Setup values and their labels
        view.setSpecificValues(values);

        view.selectSpecificValue(first.getValue());
        view.keyLabel.setText(first.getName());

        view.pressCheck.setSelected(Boolean.valueOf(second.getValue()));
        view.pressCheck.setText(second.getName());
    }

    private void setupMouseMovePanel() {
        if (_mutableAction == null) {
            return;
        }

        // Properties
        BaseMutableActionProperty first = _mutableAction.getFirstProperty();
        BaseMutableActionProperty second = _mutableAction.getSecondProperty();

        // Setup view
        EditMacroActionMouseMovePanel view = new EditMacroActionMouseMovePanel();
        view.onXValueChangedCallback = new Callback<String>() {
            @Override
            public void perform(String argument) {
                String newValue = argument;
                setActionFirstValue(newValue);
            }
        };
        view.onYValueChangedCallback = new Callback<String>() {
            @Override
            public void perform(String argument) {
                String newValue = argument;
                setActionSecondValue(newValue);
            }
        };

        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);

        // Setup values and their labels
        view.xLabel.setText(first.getName());
        view.xField.setText(first.getValue());
        view.yLabel.setText(second.getName());
        view.yField.setText(second.getValue());
    }

    private void setupSystemCommandPanel() {
        if (_mutableAction == null) {
            return;
        }

        // Properties
        BaseMutableActionProperty first = _mutableAction.getFirstProperty();
        BaseMutableActionProperty second = _mutableAction.getSecondProperty();

        // Setup view
        EditMacroActionCommandPanel view = new EditMacroActionCommandPanel();
        view.onCommandValueChanged = new Callback<String>() {
            @Override
            public void perform(String argument) {
                String newValue = argument;
                setActionFirstValue(newValue);
            }
        };

        view.onReportErrorChanged = new Callback<Boolean>() {
            @Override
            public void perform(Boolean argument) {
                String newValue = String.valueOf(argument);
                setActionSecondValue(newValue);
            }
        };

        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);

        // Setup values and their labels
        view.commandLabel.setText(first.getName());
        view.commandArea.setText(first.getValue());
        view.reportErrorCheck.setText(second.getName());
        view.reportErrorCheck.setSelected(Boolean.parseBoolean(second.getValue()));
    }

    private void setupScreenshot() {
        if (_mutableAction == null) {
            return;
        }

        // Properties
        BaseMutableActionProperty first = _mutableAction.getFirstProperty();

        // Setup view
        EditMacroActionScreenshot view = new EditMacroActionScreenshot();
        view.onPathChanged = new Callback<String>() {
            @Override
            public void perform(String argument) {
                String newValue = argument;
                setActionFirstValue(newValue);
            }
        };

        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);

        // Setup values and their labels
        view.pathLabel.setText(first.getName());
        view.pathField.setText(first.getValue());
    }

    // # Private - validators
    private boolean isTimestampValid() {
        String timetamp = timeField.getText();
        TimeType timeType = currentTimeType();

        if (timeType == TimeType.milliseconds) {
            if (!StringFormatting.isStringANonNegativeInt(timetamp)) {
                return false;
            }
        } else {
            if (!StringFormatting.isStringANonNegativeDouble(timetamp)) {
                return false;
            }
        }

        if (timetamp.length() > MAX_TIMESTAMP_VALUE_LENGTH) {
            return false;
        }

        return true;
    }

    private String isEnteredPropertyValuesValid() {
        if (_mutableAction == null) {
            return null;
        }

        for (BaseMutableActionProperty p : _mutableAction.getProperties()) {
            String error = p.getInvalidError();

            if (error != null) {
                return error;
            }
        }

        return null;
    }

    // # Private - state operations
    private void onAnyValueChanged() {
        updateState();
    }

    private void updateState() {
        if (_mutableAction == null) {
            statusLabel.setText("");
            return;
        }

        if (!isTimestampValid()) {
            statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusError, "Invalid time!"));
            saveButton.setEnabled(false);
            return;
        }

        String propertyError = isEnteredPropertyValuesValid();

        if (propertyError != null) {
            statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusError, propertyError));
            saveButton.setEnabled(false);
            return;
        }

        statusLabel.setText(_mutableAction.getStateDescription());
        saveButton.setEnabled(true);
    }

    private void updateActionWithNewestTimestamp() {
        if (_mutableAction == null) {
            return;
        }

        if (!isTimestampValid()) {
            onAnyValueChanged();
            return;
        }

        // Update value
        _mutableAction.setTimestamp(currentTimeTypedInField().inMilliseconds());
        onAnyValueChanged();
    }

    private TimeType currentTimeType() {
        String selectedItem = (String) timeTypeCombo.getSelectedItem();

        try {
            return TimeType.fromStringValue(selectedItem);
        } catch (Exception e) {
            throw new RuntimeException("Time type is invalid");
        }
    }

    // The timestamp that is current stored in the mutable action.
    private @NotNull
    TimeValue currentTimestampStored() {
        String timestampString = String.valueOf(_mutableAction.getTimestamp());
        TimeType type = currentTimeType();
        return type.asTimeFromString(timestampString);
    }

    // Converts the currently typed string in the text field, to a time value.
    private @NotNull
    TimeValue currentTimeTypedInField() {
        String text = timeField.getText();
        return currentTimeType().asTimeFromString(text);
    }

    private @NotNull
    String originalTimestampAsString() {
        TimeValue newTime = TimeValue.fromMilliseconds(_mutableAction.getOriginalTimestamp());
        return currentTimeType().asStringFromTime(newTime);
    }

    private int _selectedTypeIndex = 0;
    private EditMacroActionTypesModel _actionTypesModel;
    private BaseMutableAction _mutableAction;

    private JButton _hotkeyButton;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel panel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField timeField;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JComboBox<String> timeTypeCombo;
    private javax.swing.JComboBox<String> typesDropdown;
    // End of variables declaration//GEN-END:variables
}

class EditMacroActionTypesModel implements ComboBoxModel {

    @NotNull public final StandardDescriptionsDataSource dataSource;

    private int _selectedIndex = 0;

    public EditMacroActionTypesModel(@NotNull StandardDescriptionsDataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Override
    public void setSelectedItem(Object anItem) {
        int index = dataSource.indexOf((String) anItem);
        _selectedIndex = index;
    }

    @Override
    public Object getSelectedItem() {
        if (_selectedIndex == -1) {
            return null;
        }

        return dataSource.getElementAt(_selectedIndex);
    }

    @Override
    public int getSize() {
        return dataSource.getSize();
    }

    @Override
    public Object getElementAt(int index) {
        return dataSource.getElementAt(index);
    }

    @Override
    public void addListDataListener(ListDataListener l) {

    }

    @Override
    public void removeListDataListener(ListDataListener l) {

    }
}
