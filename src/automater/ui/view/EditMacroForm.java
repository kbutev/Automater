/*
 * Created by Kristiyan Butev.
 * Copyright Â© 2019 Kristiyan Butev. All rights reserved.
 */
package automater.ui.view;

import automater.TextValue;
import automater.utilities.Callback;
import automater.utilities.SimpleCallback;
import org.jetbrains.annotations.NotNull;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jetbrains.annotations.Nullable;

/**
 *
 * @author Bytevi
 */
public class EditMacroForm extends javax.swing.JFrame implements BaseView {

    // UI callbacks
    public SimpleCallback onBackButtonCallback = SimpleCallback.createDoNothing();
    public SimpleCallback onSaveButtonCallback = SimpleCallback.createDoNothing();
    public Callback<Integer> onSelectItem = Callback.createDoNothing();
    public Callback<Integer> onClickItem = Callback.createDoNothing();
    public Callback<Integer> onDoubleClickItem = Callback.createDoNothing();
    public Callback<Integer> onDeleteButtonCallback = Callback.createDoNothing();
    public Callback<Integer> onEditButtonCallback = Callback.createDoNothing();
    public Callback<Integer> onInsertCallback = Callback.createDoNothing();
    public Callback<String> onNameChangedCallback = Callback.createDoNothing();
    public Callback<String> onDescriptionChangedCallback = Callback.createDoNothing();

    /**
     * Creates new form EditMacroForm
     */
    public EditMacroForm() {
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        macroActionsList = new javax.swing.JList<>();
        saveButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        macroDescriptionTextArea = new javax.swing.JTextArea();
        descriptionLabel = new javax.swing.JLabel();
        macroNameField = new javax.swing.JTextField();
        macroNameLabel = new javax.swing.JLabel();
        actionsLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("< BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        macroActionsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        macroActionsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        macroActionsList.setAutoscrolls(false);
        macroActionsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                macroActionsListMouseClicked(evt);
            }
        });
        macroActionsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                macroActionsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(macroActionsList);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        macroDescriptionTextArea.setColumns(20);
        macroDescriptionTextArea.setLineWrap(true);
        macroDescriptionTextArea.setRows(2);
        macroDescriptionTextArea.setToolTipText("Macro description");
        macroDescriptionTextArea.setMaximumSize(new java.awt.Dimension(430, 56));
        jScrollPane2.setViewportView(macroDescriptionTextArea);

        descriptionLabel.setText("Description");

        macroNameField.setText("Macro name");

        macroNameLabel.setText("Name");

        actionsLabel.setText("Actions");

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(macroNameField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backButton)
                            .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(macroNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(actionsLabel))
                        .addGap(0, 255, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addGap(9, 9, 9)
                .addComponent(macroNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(macroNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(editButton)
                    .addComponent(createButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        onSaveButtonCallback.perform();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        onEditButtonCallback.perform(getSelectedIndex());
    }//GEN-LAST:event_editButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        onInsertCallback.perform(getSelectedIndex());
    }//GEN-LAST:event_createButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        onBackButtonCallback.perform();
    }//GEN-LAST:event_backButtonActionPerformed

    private void macroActionsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_macroActionsListValueChanged
        selectedMacroAt(macroActionsList.getSelectedIndex());
    }//GEN-LAST:event_macroActionsListValueChanged

    private void macroActionsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_macroActionsListMouseClicked
        int selectedIndex = macroActionsList.getSelectedIndex();

        selectedMacroAt(selectedIndex);

        // Click event
        if (evt.getClickCount() == 1) {
            onClickItem.perform(_selectedIndex);
        }

        // Double click event
        if (evt.getClickCount() == 2) {
            onDoubleClickItem.perform(_selectedIndex);
        }
    }//GEN-LAST:event_macroActionsListMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        onDeleteButtonCallback.perform(getSelectedIndex());
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditMacroForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditMacroForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditMacroForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditMacroForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditMacroForm().setVisible(true);
            }
        });
    }

    private void setup() {
        ViewUtilities.setAppIconForFrame(this);

        this.setTitle(TextValue.getText(TextValue.Edit_FormTitle));

        backButton.setText(TextValue.getText(TextValue.Edit_BackButtonTitle));

        actionsLabel.setText(TextValue.getText(TextValue.Edit_Actions));
        descriptionLabel.setText(TextValue.getText(TextValue.Edit_Description));

        deleteButton.setText(TextValue.getText(TextValue.Edit_Delete));
        editButton.setText(TextValue.getText(TextValue.Edit_Edit));
        createButton.setText(TextValue.getText(TextValue.Edit_Create));

        DocumentListener listener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String name = macroNameField.getText();
                onNameChangedCallback.perform(name);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String name = macroNameField.getText();
                onNameChangedCallback.perform(name);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                String name = macroNameField.getText();
                onNameChangedCallback.perform(name);
            }
        };

        macroNameField.getDocument().addDocumentListener(listener);

        listener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String description = macroDescriptionTextArea.getText();
                onDescriptionChangedCallback.perform(description);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String description = macroDescriptionTextArea.getText();
                onDescriptionChangedCallback.perform(description);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                String description = macroDescriptionTextArea.getText();
                onDescriptionChangedCallback.perform(description);
            }
        };

        macroDescriptionTextArea.getDocument().addDocumentListener(listener);
    }

    @Override
    public void onViewStart() {

    }

    @Override
    public void onViewSuspended() {

    }

    @Override
    public void onViewResume() {

    }

    @Override
    public void onViewTerminate() {

    }

    @Override
    public void reloadData() {

    }

    // # Public
    public @NotNull
    String getMacroName() {
        return macroNameField.getText();
    }

    public @NotNull
    String getMacroDescription() {
        return macroDescriptionTextArea.getText();
    }

    public void setListDataSource(@NotNull StandardDescriptionDataSource dataSource) {
        _dataSource = dataSource;

        macroActionsList.setModel(_dataSource);

        macroActionsList.clearSelection();
    }

    public int getSelectedIndex() {
        return _selectedIndex;
    }

    public void setMacroInfo(@NotNull String macroName, @NotNull String macroDescription) {
        macroNameLabel.setText(TextValue.getText(TextValue.Edit_Name));
        macroNameField.setText(macroName);
        macroDescriptionTextArea.setText(macroDescription);
    }

    public void setMacroDataSource(@NotNull StandardDescriptionDataSource macroActionsDataSource) {
        macroActionsList.setModel(macroActionsDataSource);
    }

    public void deselectAll() {
        macroActionsList.clearSelection();
    }

    // # Private
    private void selectedMacroAt(int index) {
        if (_selectedIndex == index) {
            return;
        }

        _selectedIndex = index;

        if (_selectedIndex == -1) {
            disableEditing();
        } else {
            enableEditing();
        }

        onSelectItem.perform(_selectedIndex);
    }

    private void enableEditing() {
        deleteButton.setEnabled(true);
        editButton.setEnabled(true);
    }

    private void disableEditing() {
        deleteButton.setEnabled(false);
        editButton.setEnabled(false);
    }

    private int _selectedIndex = -1;
    private @Nullable StandardDescriptionDataSource _dataSource;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actionsLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> macroActionsList;
    private javax.swing.JTextArea macroDescriptionTextArea;
    private javax.swing.JTextField macroNameField;
    private javax.swing.JLabel macroNameLabel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
